<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.3.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <context:annotation-config/>
    <context:component-scan base-package="com.autotest"/>

    <!--引入配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <bean id="dataSource_Mysql_autotest" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver_Mysql}" />
        <property name="url" value="${url_Mysql_autotest}" />
        <property name="username" value="${username_Mysql_autotest}" />
        <property name="password" value="${password_Mysql_autotest}" />
    </bean>

    <bean id="dynamicDataSource" class="com.autotest.core.config.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 指定lookupKey和与之对应的数据源 -->
                <entry key="Mysql_autotest" value-ref="dataSource_Mysql_autotest"></entry>
            </map>
        </property>
        <!-- 这里可以指定默认的数据源 -->
        <property name="defaultTargetDataSource" ref="dataSource_Mysql_autotest" />
    </bean>

    <!-- spring和MyBatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource" />
        <property name="configLocation"  value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
    </bean>

    <!-- 扫描mybatis的接口 mapper interface -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.autotest.core.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--&lt;!&ndash; mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 &ndash;&gt;
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>-->

    <aop:aspectj-autoproxy/>
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
<!--    <bean id="dataSourceAspect" class="com.autotest.core.util.DataSourceAspect" />
    <aop:config>
        <aop:aspect ref="dataSourceAspect">
            &lt;!&ndash; 拦截所有dao方法,把数据源注入 &ndash;&gt;
            <aop:pointcut id="dataSourcePointcut" expression="execution(* com.autotest.core.mapper.*.*(..))"/>
            <aop:before pointcut-ref="dataSourcePointcut" method="intercept"/>
        </aop:aspect>
    </aop:config>-->


    <!--     配置Spring的事务处理
       创建事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource" />
    </bean>

    <!-- 配置哪些方法要加入事务控制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
            <!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"  rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED"  rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--设置pointCut表示哪些方法要加入事务处理-->
        <aop:pointcut id="allMethods" expression="execution(* com.autotest.core.mapper.*.*(..))" />
        <!--通过advisor来确定具体要加入事务控制的方法-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
    </aop:config>
</beans>